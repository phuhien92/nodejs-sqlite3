{"version":3,"file":"static/webpack/static/development/pages/events.js.7cd4c42f067df2f7dabe.hot-update.js","sources":["webpack:///./components/Events/Event.js"],"sourcesContent":["import React, {Component} from 'react'\nimport styled, {css} from 'styled-components';\nimport Router from 'next/router';\nimport PublicSwitch from './PublishSwitch';\nimport EventDropdown from './EventDropdown';\nimport Link from '../Link';\nimport Button from '../Button';\n\nconst Block = styled.div`\n    vertical-align: middle;\n    padding: 11px 11px 7px;\n    font-size: 14px;\n    line-height: 14px;\n    background-color: #fff;\n    transition: border-color .2s ease;\n    position: relative;\n    box-sizing: border-box;\n    display: inline-block;\n    border: 1px solid #dadada;\n    border-radius: 3px;\n    max-width: 1000px;\n    width: 100%;\n    margin: 5px 0.5%;\n    box-shadow: 0 2px 5px 0 rgba(0,0,0,.16), 0 2px 10px 0 rgba(0,0,0,.12);\n\n    :hover {\n        border-color: #00a2ff;\n    }\n`;\n\nconst BlockInner = styled.div`\n    padding-left: 23px;\n    position: relative;\n`;\n\nconst EventName = styled.span`\n    color: #4D5055;\n    word-wrap: break-word;\n    word-break: break-word;\n    max-width: 80%;\n    line-height: 16px;\n    font-size: 14px;\n`;\n\nconst Marker = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 15px;\n    height: 15px;\n    background: #d9d9d9;\n    border-radius: 50%;\n    border: 1px solid #bbb;\n\n    ${({ color }) =>\n    color &&\n    css`\n      background: ${color};\n    `}\n`;\n\nclass Event extends Component {\n\n    componentDidMount () {\n        document.addEventListener('click', this.handleClickOutside);\n    }\n\n    componentWillUnmount () {\n        document.addEventListener('click', this.handleClickOutside)\n    }\n    \n    handleClickOutside = (e) => {\n        if (this.dropdownRef && !this.dropdownRef.contains(e.target)) {\n            this.props.toggleDropdown('');\n        }   \n    }\n\n    go = (e) => {\n        let target = e.target;\n\n        if (\n            !this.switchRef.contains(target) &&\n            !this.dropdownRef.contains(target)\n        ) {\n            Router.push(`/events/edit/${this.props.id}`);\n        }\n    }\n\n    toggleDropdown = () => {\n        this.props.toggleDropdown(this.props.id)\n    };\n\n    render () {\n        let {\n            event_color,\n            event_name,\n            id,\n            published\n        } = this.props,\n        toggled = this.props.toggleEvent === id;\n        \n        return (\n            <Block>\n                <BlockInner>\n                    { published ? <Marker color={event_color.value}/> : <Marker/>}\n                    \n                    <EventName>{event_name}</EventName>\n\n                    <br/>\n                    <Link path={`/events/${id}/edit`}>\n                        <Button \n                            link\n                            size={'small'}\n                        >Edit Event</Button>\n                    </Link>    \n  \n                </BlockInner>\n            </Block>\n        )\n    }\n}\n\nexport default Event"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAsBA;AAKA;AASA;AAUA;AAAA;AAAA;AACA;AAMA;;;;;;;;;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AA5BA;AACA;AACA;;;AAEA;AACA;AACA;;;AAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAGA;AAAA;AAKA;AAAA;AAEA;AACA;AAFA;AASA;;;;AA1DA;AACA;AA4DA;;;;A","sourceRoot":""}