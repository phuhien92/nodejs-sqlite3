{"version":3,"file":"static/webpack/static/development/pages/events/create.js.7cbb064662bac36b9c9e.hot-update.js","sources":["webpack:///./components/WhatEventForm/index.js"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport { withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport Error from '../Error';\nimport Button from '../Button';\nimport { \n    Form,\n    FormGroup, \n    FormLabel, \n    FormSubLabel\n} from '../../helpers/form';\nimport TextInput from '../TextInput';\nimport Textarea from '../Textarea';\nimport { db } from '../../firebase';\nimport { fetchEventById } from '../../actions/event';\nimport EventColorList from './EventColorList';\nimport EventPublishSwitch from '../EventPublishSwitch';\nimport isEqual from 'lodash.isequal';\nimport AvailabilityForm from '../AvailabilityForm';\nimport EventTypes from '../EventTypes';\nimport RepetitionBoxes from '../RepetitionBox/RepetitionBoxes';\nimport Router from 'next/router';\n\nconst ButtonWrapper = styled.div`\n    margin-top: 30px;\n`;\n\nconst InlineGroup = styled.div`\n    display: flex;\n`;\n\nconst InputWrapper = styled.div`\n    display: flex;\n    margin-right: 15px;\n`;\n\nconst FormContainer = styled.div`\n    width: 100%;\n    max-width: 800px;\n    margin-bottom: 300px;\n`;\n\nconst InlineLabel = styled.label`\n    padding: 15px;\n    font-size: 14px;\n    font-weight: 400;\n    line-height: 1;\n    color: #555;\n    text-align: center;\n    background-color: #eee;\n    border: 1px solid #ccc;\n`;\n\nconst Reddot = styled.span`\n    color: red;\n`;\n\nclass EventForm extends Component {\n\n    state = {\n        isSubmitted: false\n    }\n\n    componentWillUpdate (nextProps) {\n        let {\n            event,\n            setValues,\n            action,\n            availability\n        } = this.props;\n\n        if (!isEqual(event, nextProps.event)) {\n            setValues({...nextProps.event})\n        }\n    }\n\n    setEventPublishSwitch = () => {\n        const {\n            values,\n            setFieldValue\n        } = this.props;\n        let published = values.published;\n        setFieldValue(\"published\", !published);\n    }\n\n    render() {\n        const {\n            values,\n            setSubmitting,\n            isSubmitting,\n            availability,\n            event,\n            touched,\n            errors,\n            handleChange,\n            handleBlur,\n            handleSubmit,\n            setFieldValue,\n            setFieldTouched,\n            toggleAvaiSwitcher\n        } = this.props;\n\n        const {\n            isSubmitted \n        } = this.state;\n\n        console.log(errors)\n\n        return (\n        <FormContainer>\n            <Form \n                id=\"et-form\" \n                onSubmit={handleSubmit}\n            >   \n                \n                <EventPublishSwitch \n                    size=\"large\" \n                    setFieldValue={setFieldValue} \n                    published={values.published}\n                    isSubmitting={isSubmitting}\n                />\n                <EventTypes\n                    setFieldValue={setFieldValue}\n                    value={values.event_type}\n                    isSubmitting={isSubmitting}\n                />\n                <FormGroup>\n                    <FormLabel>Event name <Reddot>*</Reddot></FormLabel>\n                    <TextInput \n                        id=\"event_name\"\n                        type=\"text\"\n                        name=\"event_name\"\n                        value={values.event_name}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={errors.event_name && touched.event_name ? 'text-input error':'text-input'}\n                        disabled={isSubmitting}\n                    />\n                    {\n                        (touched.event_name || isSubmitted) &&\n                        errors.event_name && \n                        <Error error={errors.event_name}/>\n                    }\n                </FormGroup>\n\n                <FormGroup>\n                    <FormLabel>Duration</FormLabel>\n                    <InlineGroup>\n                        <InputWrapper>\n                            <TextInput \n                                name='event_duration_hours'\n                                type='number'\n                                min='0'\n                                value={values.event_duration_hours}\n                                onChange={handleChange}\n                                disabled={isSubmitting}\n                            />\n                            <InlineLabel>Hours</InlineLabel>\n                        </InputWrapper>\n                        <InputWrapper>\n                            <TextInput \n                                name='event_duration_minutes'\n                                type='number'\n                                min='0'\n                                value={values.event_duration_minutes}\n                                onChange={handleChange}\n                                disabled={isSubmitting}\n                            />\n                            <InlineLabel>Minutes</InlineLabel>\n                        </InputWrapper>\n                    </InlineGroup>\n                    {\n                        (touched.event_duration_hours || isSubmitted) &&\n                        errors.event_duration_hours &&\n                        <Error error={errors.event_duration_hours}/>\n                    }\n                    {\n                        (touched.event_duration_minutes || isSubmitted) &&\n                        errors.event_duration_minutes &&\n                        <Error error={errors.event_duration_minutes}/>\n                    }\n                </FormGroup>\n                \n                <FormGroup>\n                    <FormLabel>Location</FormLabel>\n                    <TextInput \n                        id=\"event_location\"\n                        type=\"text\"\n                        name=\"event_location\"\n                        value={values.event_location}\n                        onChange={handleChange}\n                        placeholder='38 Church Street, Old office building etc'\n                        disabled={isSubmitting}\n                    />\n                </FormGroup>\n                \n                <FormGroup>\n                    <FormLabel>Description/Instructions</FormLabel>\n                    <Textarea\n                        name=\"event_description\"\n                        value={values.event_description}\n                        onChange={handleChange}\n                        placeholder='Use all your essay writing skills here'\n                        disabled={isSubmitting}\n                    />\n                </FormGroup>\n\n                <FormGroup>\n                    <FormLabel>Event link <Reddot>*</Reddot></FormLabel>\n                    <TextInput \n                        type=\"text\"\n                        name=\"event_link\"\n                        value={values.event_link}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        disabled={isSubmitting}\n                    />\n                    {\n                        (touched.event_link || isSubmitted) &&\n                        errors.event_link &&\n                        <Error error={errors.event_link}/>\n                    }\n                </FormGroup>\n\n                <FormGroup>\n                    <FormLabel>Event Color</FormLabel>\n                    <EventColorList onChange={setFieldValue} selectedColor={values.event_color}></EventColorList>\n                </FormGroup>\n\n                <FormGroup>\n                    <FormLabel>Availability</FormLabel>\n                    <FormSubLabel>When do you want to schedule your event? Is is a single time event or a recurring event?</FormSubLabel>\n                    <AvailabilityForm \n                        availability={availability}\n                        setSubmitting={setSubmitting}\n                        toggleAvaiSwitcher={toggleAvaiSwitcher}\n                    />\n                \n                </FormGroup>\n                \n                <FormGroup>\n                    <FormLabel>Repetition Occurs</FormLabel>\n                    <FormSubLabel>How long will the event can be schedule in future?</FormSubLabel>\n                    <RepetitionBoxes\n                        repetition={values.repetition}\n                        onChange={setFieldValue}\n                        startDate={values.start_date}\n                        endDate={values.end_date}\n                    />\n                </FormGroup>\n\n                <ButtonWrapper>\n                    <Button\n                        icon={isSubmitting ? \"loader\":\"\"}\n                        size=\"large\"\n                        disabled={isSubmitting}\n                    >\n                        Save\n                    </Button>\n                </ButtonWrapper>\n            </Form>\n        </FormContainer>\n        )\n    }\n};\n\nconst FormikForm = withFormik({\n    mapPropsToValues: ({defaultEvent}) => ({...defaultEvent}),\n    validationSchema: Yup.object().shape({\n        event_name: Yup\n                        .string()\n                        .required('Please provide an event name.'),\n        event_duration_hours:   Yup\n                                    .number()\n                                    .positive(\"Hour must be a positive number.\")\n                                    .integer(\"Hour must be an integer.\")\n                                    .max(12, \"Duration can't be more than 12 hours.\"),\n        event_duration_minutes: Yup\n                                    .number()\n                                    .positive(\"Minutes must be a positive number\")\n                                    .integer(\"Minutes must be an integer\")\n                                    .max(59, \"Minutes can't be more than 59\"),\n        event_link: Yup\n                        .mixed()\n                        .required('Please provide an event link.'),\n                        // .test({\n                        //     name: 'event_link',\n                        //     test: value => !(value !== \"\" && value.indexOf(' ') > -1),\n                        //     message:\"Can't contain spaces\"\n                        // })\n                        // .test({\n                        //     name:'event_link',\n                        //     message:\"Event link can't contain special character.\",\n                        //     test: value => !(value !== \"\" && value.match(/[!@#$%^&*(),.?\":{}|<>]/g))\n                        // }),\n        event_color: Yup\n                        .string()\n                        .required('Please pick your event color.')\n    }),\n    handleSubmit: (values, bag) => {    \n        let {\n            props: {action, auth, availability, router},\n            setSubmitting\n        } = bag;\n        let {\n            user: {uid}\n        } = auth;\n\n        console.log(bag)\n\n        setSubmitting(true);\n\n        return;\n\n        if (action === \"update\") {\n            let {id} = router.query;\n            updateEvent(id, values, availability, setSubmitting);\n            setSubmitting(false);\n        } else if (action === \"create\") {\n            createEvent(\n                auth.user.uid, \n                values,\n                {\n                    ...availability,\n                    uid: uid\n                }\n            );\n            setSubmitting(false);\n        }\n    }\n})(EventForm);\n\nconst updateEvent = (id, values, availability, setSubmitting) => {\n    /* update action */\n\n    let avaiValues = {\n        ...availability,\n        uid: values.uid\n    },\n    avaiId = availability.id;\n\n    let delayedPush = event => (\n        new Promise( (resolve, reject) => {\n            setTimeout(() => {\n                db.ref(`/events/${id}`).update(event)\n                .then(resolve, reject);\n            },1000)\n        })\n    )\n\n    delayedPush({\n        ...values\n    })\n    .then(() => (\n        db.ref(`/availability/${avaiId}`).push({\n            ...avaiValues\n        }).catch((error) => {\n            console.error(error)\n        })\n    ))\n    .catch(error => {\n        console.error('Error writing availability to DB: ', error);\n    })\n}\n\n\nconst createEvent = (uid, values, availability) => {\n    let ref       = db.ref();\n    let eventsRef = ref.child('events');\n    let avaiRef   = ref.child('availability');\n    let delayedPush = event => (\n        new Promise( (resolve, reject) => {\n            setTimeout(() => {\n                eventsRef.push(event)\n                    .then(resolve, reject);\n            },1)\n        })\n    )\n    \n    delayedPush({\n        ...values,\n        uid: uid,\n        createAt: (new Date()).getTime(),\n        updateAt: (new Date()).getTime()\n    })\n    .then(() => (\n        eventsRef.orderByKey().on('child_added', snap => {\n            let key = snap.key;\n            let refAvaiId = avaiRef.orderByChild('id').equalTo(key);\n\n            refAvaiId.once('value', snapshot => {\n                if (!snapshot.hasChildren()) {\n                    snapshot.ref.push({\n                        ...availability,\n                        eventId: key\n                    }).then(() => {\n                        Router.push('/events');\n                    })\n                }\n\n                Router.push('/events');\n            });\n        })\n    ))\n    .catch(error => {\n        console.error('Error writing new event to DB: ', error);\n    })\n}\n\nconst mapStateToProps = ({ \n    auth, \n    loading,\n    event\n}) => ({ \n    auth, \n    loading,\n    defaultEvent: {...event},\n});\n  \nconst mapDispatchToProps = dispatch => ({\n    fetchEvent: (id) => dispatch(fetchEventById(id))\n});\n\nconst WhatEventForm = connect(mapStateToProps, mapDispatchToProps)(FormikForm)\n\nexport default WhatEventForm;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAIA;AAKA;AAMA;AAWA;AACA;AAGA;;;;;;;;;;;;;;;;;;AAEA;AACA;AADA;AACA;AAgBA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;;;;;;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AACA;;;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;AAEA;AAGA;AACA;AAFA;AAMA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAHA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAaA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AAcA;AAAA;AAKA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAcA;AACA;AACA;AACA;AACA;AALA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AAWA;AAAA;AAMA;AAAA;AAAA;AAOA;AACA;AACA;AAHA;AAYA;AACA;AACA;AACA;AAJA;AAUA;AACA;AACA;AAHA;AAWA;;;;AA9MA;AACA;AA8MA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AAKA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BA;AA+BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAEA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAKA;AALA;AAQA;AACA;AACA;AA/DA;AACA;AAiEA;AACA;AAEA;AAEA;AAFA;AAAA;AACA;AAKA;AAAA;AAEA;AACA;AAEA;AACA;AANA;AACA;AAQA;AAGA;AAIA;AACA;AALA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AANA;AACA;AAQA;AAEA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAoBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAHA;AAJA;AACA;AASA;AAAA;AACA;AAAA;AAAA;AADA;AAAA;AACA;AAGA;AAEA;;;;A","sourceRoot":""}