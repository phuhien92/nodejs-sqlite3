{"version":3,"file":"static/webpack/static/development/pages/events.js.1234e45b4689add8bb8c.hot-update.js","sources":["webpack:///./components/Events/Event.js"],"sourcesContent":["import React, {Component} from 'react'\nimport styled, {css} from 'styled-components';\nimport Router from 'next/router';\nimport PublicSwitch from './PublishSwitch';\nimport EventDropdown from './EventDropdown';\nimport Link from '../Link';\nimport Button from '../Button';\n\nconst StyledRow = styled.tr`\n    min-height: 60px;\n`;\n\nconst StyledCol = styled.td`\n    text-align: center;\n`;\n\nconst EventName = styled.span`\n    color: #4D5055;\n    word-wrap: break-word;\n    word-break: break-word;\n    max-width: 80%;\n    line-height: 16px;\n    font-size: 14px;\n`;\n\nconst Marker = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 15px;\n    height: 15px;\n    background: #d9d9d9;\n    border-radius: 50%;\n    border: 1px solid #bbb;\n\n    ${({ color }) =>\n    color &&\n    css`\n      background: ${color};\n    `}\n`;\n\nclass Event extends Component {\n\n    componentDidMount () {\n        document.addEventListener('click', this.handleClickOutside);\n    }\n\n    componentWillUnmount () {\n        document.addEventListener('click', this.handleClickOutside)\n    }\n    \n    handleClickOutside = (e) => {\n        if (this.dropdownRef && !this.dropdownRef.contains(e.target)) {\n            this.props.toggleDropdown('');\n        }   \n    }\n\n    go = (e) => {\n        let target = e.target;\n\n        if (\n            !this.switchRef.contains(target) &&\n            !this.dropdownRef.contains(target)\n        ) {\n            Router.push(`/events/edit/${this.props.id}`);\n        }\n    }\n\n    toggleDropdown = () => {\n        this.props.toggleDropdown(this.props.id)\n    };\n\n    render () {\n        let {\n            event_color,\n            event_name,\n            id,\n            published,\n            event_duration_hours,\n            event_duration_minutes\n        } = this.props,\n        toggled = this.props.toggleEvent === id;\n\n        return (\n            <StyledRow>\n                <StyledCol>\n                    { published ? <Marker color={event_color.value}/> : <Marker/>}\n                    <EventName>{event_name}</EventName>\n                </StyledCol>\n                <StyledCol></StyledCol>\n                <StyledCol>\n                    {event_duration_hours > 0 ? `${event_duration_hours} hr `:null}\n                    {event_duration_minutes > 0 ? `${event_duration_minutes} min`:null}\n                </StyledCol>\n                <StyledCol>\n                    <Link path={`/events/${id}/edit`}>\n                        <Button \n                            link\n                            size={'small'}\n                        >Edit Event</Button>\n                    </Link>    \n                </StyledCol>\n            </StyledRow>\n        )\n    }\n}\n\nexport default Event"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAIA;AASA;AAUA;AAAA;AAAA;AACA;AAMA;;;;;;;;;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AA5BA;AACA;AACA;;;AAEA;AACA;AACA;;;AAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAGA;AAAA;AASA;AAAA;AAEA;AACA;AAFA;AAQA;;;;AA/DA;AACA;AAiEA;;;;A","sourceRoot":""}