{"version":3,"file":"static/webpack/static/development/pages/event_types/edit.js.ea1d199927601d0277e3.hot-update.js","sources":["webpack:///./components/WhatEventForm/index.js"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport { withFormik } from 'formik';\nimport Yup from 'yup';\nimport Error from '../Error';\nimport Button from '../Button';\nimport { \n    FormGroup, \n    FormLabel, \n    ExpandableBlock, \n    ExpandableHeader, \n    ExpandableSubtitle, \n    ExpandableTitle, \n    ExpandableContent, \n    ExpandButtonLink \n} from '../../helpers/form';\nimport TextInput from '../TextInput';\nimport Textarea from '../Textarea';\nimport { db } from '../../firebase';\nimport Router from 'next/router';\nimport Toggle from 'react-toggled'\nimport { fadeIn } from '../../helpers/animations';\nimport { fetchEventById } from '../../actions/event';\nimport EventColorList from './EventColorList';\n\nconst ButtonWrapper = styled.div`\n    > button {\n        margin-right: 1rem;\n    }\n`;\n\nconst Form = styled.form`\n    position: relative;\n    flex-basis: 400px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: stretch;\n    animation: ${fadeIn} 0.8s ease-out;\n    width: 100%;\n    margin-top: 20px;\n    input {\n        margin-bottom: 48px;\n    }\n    @media only screen and (max-width: 768px) {\n        input {\n        margin-bottom: 32px;\n        }\n    }\n`;\n\nclass ETInnerForm extends Component {\n\n    componentDidMount () {\n        if (this.props.type === \"create\") {\n            this.props.setValues({\n                ...this.props.event\n            })\n        }  \n        if (this.props.type === \"update\") {\n            let {\n                query\n            } = this.props;\n\n            this.props.fetchEvent(query.id).then(event => {\n                this.props.setValues({\n                    ...event\n                })\n            })\n        }\n\n        this.setState({\n            ...this.props.event\n        })\n    }\n\n    setEventColor = (color) => {\n        this.setState({\n            event_color: color\n        }, () => {\n            this.props.setValues({\n                event_color: color\n            })\n            console.log(this.props.values)\n        })\n        \n        return false;\n    }\n\n    render() {\n        const {\n            values,\n            touched,\n            errors,\n            isSubmitting,\n            handleChange,\n            handleBlur,\n            handleSubmit,\n        } = this.props;\n\n        return (\n            <Toggle on={true}>\n                {({on, getTogglerProps, setOn}) => (\n                <ExpandableBlock >\n                    <ExpandableHeader {...getTogglerProps()}>\n                        <ExpandableTitle>What event is this?</ExpandableTitle>\n                        <ExpandableSubtitle>{values && values.event_name}</ExpandableSubtitle>\n                        {!on && \n                            <ExpandButtonLink>\n                                Edit\n                            </ExpandButtonLink>\n                        }\n                    </ExpandableHeader>\n                    {on && \n                    <ExpandableContent>\n                        <Form \n                            id=\"et-form\" \n                            onSubmit={handleSubmit}\n\n                        >   \n                            <FormGroup>\n                                <FormLabel>Event name *</FormLabel>\n                                <TextInput \n                                    id=\"event_name\"\n                                    type=\"text\"\n                                    name=\"event_name\"\n                                    value={values.event_name}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    className={errors.event_name && touched.event_name ? 'text-input error':'text-input'}\n                                    autoFocus\n                                />\n                                {\n                                    errors.event_name &&\n                                    touched.event_name && <Error error={errors.event_name} type=\"event_name\"/>\n                                }\n                            </FormGroup>\n                            \n                            <FormGroup>\n                                <FormLabel>Location</FormLabel>\n                                <TextInput \n                                    id=\"event_location\"\n                                    type=\"text\"\n                                    name=\"event_location\"\n                                    value={values.event_location}\n                                    onChange={handleChange}\n                                    className={errors.event_location && touched.event_location ? 'text-input error':'text-input'}\n                                />\n                                {\n                                    errors.event_location &&\n                                    touched.event_location && <Error error={errors.event_location} type=\"event_location\"/>\n                                }\n                            </FormGroup>\n                            \n                            <FormGroup>\n                                <FormLabel>Description/Instructions</FormLabel>\n                                <Textarea\n                                    name=\"event_description\"\n                                    value={values.event_description}\n                                    onChange={handleChange}\n                                    className={errors.event_description && touched.event_description ? 'text-input error':'text-input'}\n                                />\n                                {\n                                    errors.event_description &&\n                                    touched.event_description && <Error error={errors.event_description} type=\"event_description\"/>\n                                }\n                            </FormGroup>\n\n                            <FormGroup>\n                                <FormLabel>Event link *</FormLabel>\n                                <TextInput \n                                    type=\"text\"\n                                    name=\"event_link\"\n                                    value={values.event_link}\n                                    onChange={handleChange}\n                                    className={errors.event_link && touched.event_link ? 'text-input error':'text-input'}\n                                />\n                                {\n                                    errors.event_link &&\n                                    touched.event_link && <Error error={errors.event_link} type=\"event_link\"/>\n                                }\n                            </FormGroup>\n\n                            <FormGroup>\n                                <FormLabel>Event Color</FormLabel>\n                                <EventColorList setEventColor={this.setEventColor} selectedColor={values.event_color}></EventColorList>\n                            </FormGroup>\n                                \n                            <ButtonWrapper>\n                                <Button\n                                    disabled={isSubmitting}\n                                    type=\"submit\"\n                                >\n                                    Save\n                                </Button>\n                            </ButtonWrapper>\n\n                        </Form>\n                    </ExpandableContent>}\n                </ExpandableBlock>\n                )}\n            </Toggle>\n        )\n    }\n};\n\nconst ETForm = withFormik({\n    mapPropsToValues: () => ({\n        event_name: '',\n        event_color: {},\n        event_location: '',\n        event_description: '',\n        event_link: ''\n    }),\n    validationSchema: Yup.object().shape({\n        event_name: Yup.string().required('Please provide an event name.'),\n        event_link: Yup.string().required('Please provide an event link.'),\n        event_color: Yup.string().required('Please pick your event color.')\n    }),\n    handleSubmit: (values, {props: { auth, query: {id}, type }, setSubmitting, setErrors}) => {        \n        if (type === \"update\") {\n            updateEvent(id, values);\n        } else if (type === \"create\") {\n            createEvent(auth, values);\n        }\n    }\n})(ETInnerForm);\n\nETInnerForm.propTypes = {\n\n};\n\nconst updateEvent = (id, values) => {\n    /* update action */\n    db.ref(`/events/${id}`).update({\n        ...values\n    }).catch((error) => {\n        console.error(error)\n    })\n}\n\nconst createEvent = (auth, values) => {\n    let uid = auth.user.uid;\n    let ref       = db.ref();\n    let eventsRef = ref.child('events');\n\n    let delayedPush = event => (\n        new Promise( (resolve, reject) => {\n            setTimeout(() => {\n                eventsRef.push(event)\n                    .then(resolve, reject);\n            },1)\n        })\n    )\n    \n    delayedPush({\n        ...values,\n        uid: uid,\n        step: 1,\n        timestamp: (new Date()).getTime()\n    })\n    .then(() => (\n        eventsRef.orderByKey().on('child_added', snap => {\n            let key = snap.key;\n            Router.push(`/event_types/single?id=${key}`,`/event_types/${key}`)\n        })\n    ))\n    .catch(error => {\n        console.error('Error writing new event to DB: ', error);\n    })\n}\n\nconst mapStateToProps = ({ \n    auth, \n    loading,\n    event,\n}) => ({ \n    auth, \n    loading,\n    event\n});\n  \nconst mapDispatchToProps = dispatch => ({\n    fetchEvent: (id) => dispatch(fetchEventById(id))\n});\n\nconst WhatEventForm = connect(mapStateToProps, mapDispatchToProps)(ETForm)\n\nexport default WhatEventForm;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AAmBA;;;;;;;;;;;;;;;;;;AAyBA;AACA;AACA;AADA;AAGA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;AAnCA;AAAA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAKA;AACA;AAGA;AACA;AACA;AACA;AAGA;;;AAeA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAcA;AACA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAYA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAJA;AAQA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AALA;AASA;AAAA;AAAA;AAMA;AAAA;AAAA;AAKA;AACA;AAFA;AAvFA;AAqGA;;;;AAxJA;AACA;AAwJA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAOA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAsBA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AANA;AACA;AAQA;AAEA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAHA;AAJA;AACA;AASA;AAAA;AACA;AAAA;AAAA;AADA;AAAA;AACA;AAGA;AAEA;;;;A","sourceRoot":""}